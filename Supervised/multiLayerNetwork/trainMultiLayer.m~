function [Wout,Vout, trainingError, testError ] = trainMultiLayer(Xtraining,Dtraining,Xtest,Dtest, W0, V0,numIterations, learningRate )
%TRAINMULTILAYER Trains the network (Learning)
%   Inputs:
%               X* - Trainin/test features (matrix)
%               D* - Training/test desired output of net (matrix)
%               V0 - Weights of the output neurons (matrix)
%               W0 - Weights of the hidden neurons (matrix)
%               numIterations - Number of learning setps (scalar)
%               learningRate - The learningrate (scalar)
%
%   Output:
%               Wout - Weights after training (matrix)
%               Vout - Weights after training (matrix)
%               trainingError - The training error for each iteration
%                               (vector)
%               testError - The test error for each iteration
%                               (vector)

        X = Xtraining;
        D = Dtraining;

Wout = W0;
Vout = V0;

trainingError = 0;
testError = 0;

examples = size(Xtraining, 2);

for iteration = 1:numIterations
    
    dW = zeros(size(W0));
    dV = zeros(size(V0));
    
%    for x = 1:examples
        %X = Xtraining(:,x);
        %D = Dtraining(:,x);
        
        z1 = Wout * X;
        z1 = [ones(1, size(z1,2)); z1];
        a1 = tanh(z1);

        z2 = Vout * a1;
        a2 = tanh(z2);

        e2 = (a2 - D) .* tanhprim(z2);
        e1 = (Vout'*e2) .* tanhprim(z1);
        
        dW = e1(2:end,:) * X';
        dV = e2 * a1';
%    end
    
    Wout = Wout + learningRate * dW;
    Vout = Vout + learningRate * dV;
end

end

